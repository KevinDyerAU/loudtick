################################################################################################################################
## Portainer
docker volume create portainer_data
docker run -d -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer

user: admin
pass: password

################################################################################################################################
##LOUDML Community
docker pull loudml/community
docker run -ti -p 8077:8077 -v /etc/loudml:/java_rt/loudml/config.yml  -v /var/lib/loudml:/var/lib/loudml:rw loudml/community




################################################################################################################################
##InfluxDB Local


# As a windows service
https://www.sheldonhull.com/blog/running-influx-db-as-a-service-in-windows
http://wragg.io/windows-based-grafana-analytics-platform-via-influxdb-and-powershell/


################################################################################################################################
##Telegraf Local
	
  telegraf.exe config > telegraf.conf
  telegraf.exe -service install -config C:\java_rt\telegraf\telegraf.conf
  
  https://api.btcmarkets.net/market/BTC/AUD/trades?since=59868345231

################################################################################################################################
######## TICK Docker Stack

Run the complete TICK stack using this [docker-compose](https://docs.docker.com/compose/) file.
By using docker-compose all four official TICK stack images are started and linked together.
To know more about the individual components see [this](https://influxdata.com/)

## Usage

Start all the images as follows:

    # cd to desired version
    cd 1.3/
    # Start all images in the background
    docker-compose up -d

### Check that InfluxDB works:

Run this curl command, if no errors occur InfluxDB is running:

    curl http://localhost:8086/ping


#### The `influx` client

Use the built-in influx cli service:

    docker-compose run influxdb-cli

### Check that Telegraf works

By default, the Telegraf creates a `telegraf` database.
Check that InfluxDB has such a database in addition to the `_internal` database.

    docker-compose run influxdb-cli
    > show databases

### Check that Chronograf works

Access the Chronograf inteface, [http://localhost:8888](http://localhost:8888)

### Check Kapacitor works

First, run this curl command, if no errors occur Kapacitor is running:

    curl http://localhost:9092/kapacitor/v1/ping


Use the built-in kapacitor cli service:

    docker-compose run kapacitor-cli
    $ kapacitor list tasks

Confirm Kapacitor is subscribed to all databases in InfluxDB

    docker-compose run influxdb-cli
    > show subscriptions

## Supported Docker versions

This image is officially supported on Docker version 1.10.1 or newer.
